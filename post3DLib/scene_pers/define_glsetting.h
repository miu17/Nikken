#ifndef DEFINEGLSETTING_H
#define DEFINEGLSETTING_H

#include <QGLViewer/qglviewer.h>

#ifdef POST3D_LIB
#define POST3D_CLASS_DLLSPEC Q_DECL_EXPORT
#else
#define POST3D_CLASS_DLLSPEC Q_DECL_IMPORT
#endif

namespace post3dapp{
struct POST3D_CLASS_DLLSPEC PERSSETTINGVALUES {
    explicit PERSSETTINGVALUES(
        int _style = 0,
        QColor _color = QColor(0, 0, 0, 255),
        qreal _ox = 0.0,
        qreal _oy = 0.0,
        qreal _oz = 0.0,
        bool _l1on = true,
        qreal _l1x = 1.0,
        qreal _l1y = -1.0,
        qreal _l1z = 1.0,
        bool _l2on = false,
        qreal _l2x = -1.0,
        qreal _l2y = 1.0,
        qreal _l2z = 1.0,
        bool _l3on = true,
        qreal _l3x = -1.0,
        qreal _l3y = -1.0,
        qreal _l3z = 1.0,
        bool _clipon = false,
        qreal _ca = 0.0,
        qreal _cb = 0.0,
        qreal _cc = 0.0,
        qreal _cd = 0.0,
        bool _gridon = true,
        qreal _gx = 0.0,
        qreal _gy = 0.0,
        qreal _gz = 0.0,
        qreal _pt = 5000.0,
        int _ix = 20,
        int _iy = 20,
        bool _fugoon = true,
        bool _jointon = true,
        bool _axison = true,
        qreal _alen = 5000.0 )
        : drawingStyle(_style), backColor(_color), centerX(_ox), centerY(_oy), centerZ(_oz),
          isLight1On(_l1on), light1X(_l1x), light1Y(_l1y), light1Z(_l1z),
          isLight2On(_l2on), light2X(_l2x), light2Y(_l2y), light2Z(_l2z),
          isLight3On(_l3on), light3X(_l3x), light3Y(_l3y), light3Z(_l3z),
          isClippingOn(_clipon), clippingCorA(_ca), clippingCorB(_cb), clippingCorC(_cc), clippingCorD(_cd),
          isGridOn(_gridon), gridX(_gx), gridY(_gy), gridZ(_gz),
          gridPitch(_pt), gridCountX(_ix), gridCountY(_iy),
          isTextOn(_fugoon), isJointOn(_jointon), isAxisOn(_axison), axisLength(_alen) { }

    int drawingStyle;           // 0:ソリッド,1:ワイヤー,2:ライン
    QColor backColor;           // 背景色
    qreal centerX;              // パース中心 X座標(mm)
    qreal centerY;              // パース中心 Y座標(mm)
    qreal centerZ;              // パース中心 Z座標(mm)
    bool isLight1On;             // 光源1 ON/OFF
    qreal light1X;               // 光源1 ex
    qreal light1Y;               // 光源1 ey
    qreal light1Z;               // 光源1 ez
    bool isLight2On;             // 光源2 ON/OFF
    qreal light2X;               // 光源2 ex
    qreal light2Y;               // 光源2 ey
    qreal light2Z;               // 光源2 ez
    bool isLight3On;             // 光源3 ON/OFF
    qreal light3X;               // 光源3 ex
    qreal light3Y;               // 光源3 ey
    qreal light3Z;               // 光源3 ez
    bool isClippingOn;          // クリッピング　ON/OFF
    qreal clippingCorA;         // 係数a (mm)
    qreal clippingCorB;         // 係数b (mm)
    qreal clippingCorC;         // 係数c (mm)
    qreal clippingCorD;         // 係数d (mm)
    bool isGridOn;              // グリッド表示　ON/OFF
    qreal gridX;                // グリッド原点　X座標(mm)
    qreal gridY;                // グリッド原点　Y座標(mm)
    qreal gridZ;                // グリッド原点　Z座標(mm)
    qreal gridPitch;            // グリッドピッチ(mm)
    int gridCountX;             // グリッド　X方向個数
    int gridCountY;             // グリッド　Y方向個数
    bool isTextOn;              // テキスト表示　ON/OFF
    bool isJointOn;             // 節点表示　ON/OFF
    bool isAxisOn;              // 軸表示　ON/OFF
    qreal axisLength;           // 軸の長さ(mm)
};



struct PERSANALYSISSETTINGS {
    explicit PERSANALYSISSETTINGS(
        QColor _color = QColor(0, 0, 0, 255),
        bool _fugoon = true,
        bool _jointon = true,
        bool _axison = true,
        qreal _alen = 5000.0 )
        : backColor(_color), isTextOn(_fugoon), isJointOn(_jointon),
          isAxisOn(_axison), axisLength(_alen) { }

    QColor backColor;           // 背景色
    bool isTextOn;              // テキスト表示　ON/OFF
    bool isJointOn;             // 節点表示　ON/OFF
    bool isAxisOn;              // 軸表示　ON/OFF
    qreal axisLength;           // 軸の長さ(mm)
};

enum class VIEWDIR { Y_PLUS = 0, Y_MINUS, X_PLUS, X_MINUS, Z_PLUS, Z_MINUS };

enum class LIGHTDIR { XP_YM = 0, XM_YM, XP_YP, XM_YP };


struct INDEXPAIR {
    explicit INDEXPAIR( int _i = 0, int _j = 0 )
        : indexI(_i), indexJ(_j) { }

    int indexI;
    int indexJ;
};

enum class PERSSELECTMODE { PERS_NOSELECT = 0, PERS_ADDSELECT, PERS_REMOVESELECT };

enum class DRAWINGSTYLE { SOLIDWIRE = 0, WIREONLY, LINEONLY, SOLIDONLY };




/*
GLubyte mask[] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x03, 0x80, 0x01, 0xC0, 0x06, 0xC0, 0x03, 0x60,
    0x04, 0x60, 0x06, 0x20, 0x04, 0x30, 0x0C, 0x20,
    0x04, 0x18, 0x18, 0x20, 0x04, 0x0C, 0x30, 0x20,
    0x04, 0x06, 0x60, 0x20, 0x44, 0x03, 0xC0, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x44, 0x01, 0x80, 0x22, 0x44, 0x01, 0x80, 0x22,
    0x66, 0x01, 0x80, 0x66, 0x33, 0x01, 0x80, 0xCC,
    0x19, 0x81, 0x81, 0x98, 0x0C, 0xC1, 0x83, 0x30,
    0x07, 0xe1, 0x87, 0xe0, 0x03, 0x3f, 0xfc, 0xc0,
    0x03, 0x31, 0x8c, 0xc0, 0x03, 0x33, 0xcc, 0xc0,
    0x06, 0x64, 0x26, 0x60, 0x0c, 0xcc, 0x33, 0x30,
    0x18, 0xcc, 0x33, 0x18, 0x10, 0xc4, 0x23, 0x08,
    0x10, 0x63, 0xC6, 0x08, 0x10, 0x30, 0x0c, 0x08,
    0x10, 0x18, 0x18, 0x08, 0x10, 0x00, 0x00, 0x08};
*/

const GLubyte hatch[] = {
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55,
    0xAA, 0xAA, 0xAA, 0xAA, 0x55, 0x55, 0x55, 0x55
};



/*
GLubyte mask[] = {
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22,
    0x44, 0x44, 0x44, 0x44, 0x22, 0x22, 0x22, 0x22 };
*/
} // namespace post3dapp
#endif
